# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property, Properties
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
from buildbot.steps.source.github import GitHub
from buildbot.process.remotecommand import RemoteCommand
from twisted.internet import defer
import sys
import docker
from datetime import timedelta

sys.setrecursionlimit(10000)

c = BuildmasterConfig = {}

config = { "private": { }}
exec(open("../master-private.cfg").read(), config, { })

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.mariadb.org/"

# minimalistic config to activate web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}), custom_templates_dir='templates')

# Plain username auth
#c['www']['authz'] = util.Authz(allowRules=[util.AnyControlEndpointMatcher(role="admins")],
#                               roleMatchers=[util.RolesFromUsername(roles=["admins"], usernames=["admin"])])
#c['www']['auth'] = util.UserPasswordAuth({'admin': config["private"]["user_pass"]["admin"]})

# Github Auth, allow control for MariaDB affiliated accounts
c['www']['authz'] = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role="MariaDB", defaultDeny=True)
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)
c['www']['auth'] = util.GitHubAuth(config["private"]["gh_mdbauth"]["client"], config["private"]["gh_mdbauth"]["secret"])

# Sponsor plugin
exec(open("../sponsor.py").read())

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

####### GitHub hooks

# GitHub webhook receiver
c['www']['change_hook_dialects'] = {
        'github': {
                'secret': config["private"]["gh_secret"],
                'strict': True,
        }
}

c['www']['ui_default_config'] = { 
    'Grid.changeFetchLimit': 5,
    'Grid.buildFetchLimit': 50,
}

c['logEncoding'] = 'utf-8'

#c['www']['plugins']['profiler'] = True
#c['services'] = [util.ProfilerService(frequency=100, gatherperiod=30 * 60, mode='prof', basepath='/srv/buildbot/master/master-web/prof', wantBuilds=100)]

c['multiMaster'] = True
c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : config["private"]["db_url"]
}

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

c['mq'] = {
    'type' : 'wamp',
    'router_url': 'ws://buildbot.mariadb.org:8085/ws',
    'realm': 'realm1',
    # valid are: none, critical, error, warn, info, debug, trace
    'wamp_debug_level' : 'warn'
}

####### SCHEDULERS

builders_quick=["ubuntu-1404", "ubuntu-1604", "32bit-ubuntu-1604", "ubuntu-1804", "ubuntu-2004", "ubuntu-2004-icc", "fulltest-ubuntu-2004", "ubuntu-2004-gcc10", "ubuntu-2004-clang11", "ubuntu-1804-clang6", "ubuntu-1804-clang10", "asan-ubuntu-1804-clang10", "msan-ubuntu-1804-clang10", "32bit-ubuntu-1804", "valgrind-ubuntu-1804", "aarch64-ubuntu-1604", "aarch64-ubuntu-1804", "aarch64-ubuntu-2004", "rhel-8", "debug-ubuntu-1804", "debian-9", "32bit-debian-9","debian-10", "debian-sid", "32bit-debian-sid","fedora-31", "fedora-32", "fedora-33", "centos-7", "centos-8", "opensuse-15", "opensuse-42", "sles-12", "sles-15", "pc9-ubuntu-1604", "pc9-ubuntu-1804", "pc9-ubuntu-2004", "pc9-clang6-ubuntu-1804", "pc9-clang10-ubuntu-1804", "pc9-without-server-ubuntu-1804", "pc9-rhel-8", "pc9-centos-7", "aarch64-fedora-32", "aarch64-centos-7", "aarch64-debian-10", "aarch64-debian-9", "aarch64-rhel-7", "aarch64-rhel-8", "windows-1809", "windows-packages-1809", "win32-1809", "win32-packages-1809", "windows-compile", "aix"]

builders_autobake=["centos-7-rpm-autobake", "centos-8-rpm-autobake", "debian-9-deb-autobake", "32bit-debian-9-deb-autobake", "debian-10-deb-autobake", "debian-sid-deb-autobake", "32bit-debian-sid-deb-autobake","fedora-31-rpm-autobake", "fedora-32-rpm-autobake", "fedora-33-rpm-autobake", "rhel-8-rpm-autobake", "opensuse-15-rpm-autobake", "opensuse-42-rpm-autobake", "sles-12-rpm-autobake", "sles-15-rpm-autobake", "ubuntu-1404-deb-autobake", "ubuntu-1804-deb-autobake", "ubuntu-2004-deb-autobake", "ubuntu-1604-deb-autobake", "32bit-ubuntu-1604-deb-autobake", "aarch64-ubuntu-1604-deb-autobake", "aarch64-ubuntu-1804-deb-autobake", "aarch64-ubuntu-2004-deb-autobake", "pc9-ubuntu-1604-deb-autobake", "pc9-ubuntu-1804-deb-autobake", "pc9-ubuntu-2004-deb-autobake", "pc9-centos-7-rpm-autobake", "aarch64-debian-10-deb-autobake", "aarch64-debian-9-deb-autobake", "aarch64-fedora-32-rpm-autobake", "aarch64-centos-7-rpm-autobake", "aarch64-rhel-7-rpm-autobake", "aarch64-rhel-8-rpm-autobake"]

builders_big=["ubuntu-1804-bigtest"]

builders_install=["ubuntu-1804-deb-autobake-install", "centos-7-rpm-autobake-install"]

builders_upgrade=["ubuntu-1804-deb-autobake-major-upgrade", "ubuntu-1804-deb-autobake-minor-upgrade", "centos-7-rpm-autobake-major-upgrade", "centos-7-rpm-autobake-minor-upgrade"]

builders_eco=["ubuntu-2004-eco-php", "debian-10-eco-pymysql"]
 

# Configure the Schedulers, which decide how to react to incoming changes.

branches_main=['5.5', '5.5-galera', '10.0', '10.0-galera', '10.1', '10.2', '10.3', '10.4', '10.5', '10.6', '10.7']

# git branch filter using fnmatch
import fnmatch
def upstream_branch_fn(branch):
    return branch in branches_main or fnmatch.fnmatch(branch, 'bb-*') or fnmatch.fnmatch(branch, 'st-*') or fnmatch.fnmatch(branch, 'prot-*') or fnmatch.fnmatch(branch, "refs/pull/*") or fnmatch.fnmatch(branch, "preview-10.*")
def staging_branch_fn(branch):
    return fnmatch.fnmatch(branch, 'st-*')
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

c['schedulers'] = []

# upstream scheduling
schedulerTarball = schedulers.AnyBranchScheduler(
        name="s_upstream_tarball",
        change_filter=util.ChangeFilter(repository="https://github.com/MariaDB/server", branch_fn=upstream_branch_fn),
        treeStableTimer=60,
        builderNames=["tarball-docker"])
c['schedulers'].append(schedulerTarball)

#--

# Other schedulers

# github.com/shinnok/server
c['schedulers'].append(schedulers.SingleBranchScheduler( name="s_vicentiu",
    change_filter=util.ChangeFilter(repository="https://github.com/cvicentiu/server", branch_fn=upstream_branch_fn),
    treeStableTimer=60,
    builderNames=["tarball-docker"]))

#--

